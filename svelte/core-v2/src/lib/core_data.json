{
    "capabilities": {
        "climate-for-learning": {
            "name": "Climate for learning",
            "summary": "A climate for learning is an atmosphere within an organization that fosters a culture of continuous improvement and knowledge sharing. It's not just about formal training programs, but a mindset where learning is seen as a strategic investment, essential for growth and success. A strong climate for learning is directly linked to better software delivery performance, including increased deployment frequency, reduced lead time for changes, and improved team culture. It also contributes to overall organizational performance, making it a valuable investment for any organization.",
            "link": "/capabilities/#climate%20for%20learning",
            "entities": {
                "code-maintainability": {
                    "name": "Code Maintainability",
                    "link": "/capabilities/code-maintainability/",
                    "summary": "Systems and tools that make it easy for developers to change code maintained by others, to find examples in the codebase, to reuse other people’s code, and to add, upgrade, and migrate to new versions of dependencies without breaking their code."
                },
                "documentation-quality": {
                    "name": "Documentation quality",
                    "link": "/capabilities/documentation-quality/",
                    "summary": "<p>Documentation quality interacts with technical capabilities to improve organizational performance. This interaction dramatically amplifies the impact that software teams can deliver toward achieving an organization&rsquo;s overarching goals. Practices which contribute to documentation quality include:</p><ul><li>Documenting critical use cases for your products and services.</li><li>Creating clear guidelines for updating and editing existing documentation.</li><li>Defining owners.</li><li>Including documentation as part of the software development process.</li><li>Recognizing documentation work during performance reviews and promotions.</li></ul>"
                },
                "teams-empowered-to-choose-tools": {
                    "name": "Empowering teams to choose tools",
                    "link": "/capabilities/teams-empowered-to-choose-tools/",
                    "summary": "Teams that can choose which tools to use do better at continuous delivery. No one knows better than practitioners what they need to be effective."
                },
                "generative-organizational-culture": {
                    "name": "Generative culture",
                    "link": "/capabilities/generative-organizational-culture/",
                    "summary": "This measure of organizational culture is based on a typology developed by Ron Westrum, a sociologist who studied safety-critical complex systems in the domains of aviation and healthcare. Our own research has found that this measure of culture is predictive of IT Performance, organizational performance, and decreasing burnout. Hallmarks of this include good information flow, high cooperation and trust, bridging between teams, and embracing novel solutions."
                }
            }
        },
        "fast-flow": {
            "name": "Fast flow",
            "summary": "Flow is the ultimate state of focus and productivity for software development teams. It's a continuous delivery approach that enables your team to consistently deliver high-quality software at speed. By embracing Fast Flow, your team can achieve the state of \"flow\" – a heightened level of focus where time seems to melt away, and productivity soars. This translates to improved software delivery performance as measured by DORA's research, helping your organization stay ahead of the competition and deliver greater value to your customers.",
            "link": "/capabilities/#fast%20flow",
            "entities": {
                "continuous-delivery": {
                    "name": "Continuous delivery",
                    "link": "/capabilities/continuous-delivery/",
                    "summary": "<p>Teams can be said to have implemented continuous delivery when they have achieved the following outcomes:</p><ul><li>Teams can deploy to production (or to end users) on demand, throughout the software delivery lifecycle.</li><li>Fast feedback on the quality and deployability of the system is available to everyone on the team, and people make acting on this feedback their highest priority.</li></ul><p>Continuous delivery requires the implementation of a number of technical practices including continuous integration, trunk-based development, the comprehensive use of version control, and continuous testing.</p><p>In turn, continuous delivery drives a number of outcomes: higher software delivery performance, better organizational culture, less rework, lower deployment pain, and less burnout.</p>"
                },
                "database-change-management": {
                    "name": "Database change management",
                    "link": "/capabilities/database-change-management/",
                    "summary": "Database changes don’t slow teams down if they follow a few key practices, including storing database changes as scripts in version control (and managing these changes the same way as production application changes), making database changes visible to everyone in the software delivery lifecycle (including engineers), and communicating with all parties when changes to the application require database changes."
                },
                "deployment-automation": {
                    "name": "Deployment automation",
                    "link": "/capabilities/deployment-automation/",
                    "summary": "The degree to which deployments are fully automated and do not require manual intervention."
                },
                "flexible-infrastructure": {
                    "name": "Flexible infrastructure",
                    "link": "/capabilities/flexible-infrastructure/",
                    "summary": "<p>Infrastructure flexibility is often a motivation for organizations to adopt cloud computing. However, the use of a cloud provider alone may not be sufficient to achieve the desired agility. DORA’s research uses <a href='https://csrc.nist.gov/pubs/sp/800/145/final' target='_blank'>a definition</a> from The USA’s National Institute of Standards and Technology (NIST) to establish the five essential characteristics that enable cloud computing to provide its full potential benefit to an organization:</p><ul><li>On-demand self-service</li><li>Broad network access</li><li>Resource pooling</li><li>Rapid elasticity</li><li>Measured service</li></ul>"
                },
                "loosely-coupled-teams": {
                    "name": "Loosely coupled teams",
                    "link": "/capabilities/loosely-coupled-teams/",
                    "summary": "An organizational structure that allows teams to test and deploy their applications on demand, without requiring orchestration with other services. Team structure and technical architecture are highly interrelated: having a loosely coupled architecture allows your teams to work independently without relying on other teams for support and services, which in turn enables them to work quickly and deliver value to the organization."
                },
                "streamlining-change-approval": {
                    "name": "Streamlining change approval",
                    "link": "/capabilities/streamlining-change-approval/",
                    "summary": "Most IT organizations have change management processes to manage the life cycle of changes to IT services, both internal and customer-facing. These processes are often the primary controls to reduce the operational and security risks of change. Change management processes often include approvals by external reviewers or change approval boards (CABs) to promote changes through the system.\n\nOur research shows that formal change management processes that require the approval of an external body such as a change advisory board (CAB) or a senior manager have a negative impact on software delivery performance. Furthermore, we found no evidence to support the hypothesis that a more formal approval process is associated with lower change fail rates. However the data does support the hypothesis that introducing more approvals results in a slower process and less frequent releases of large batches, with an accompanying higher impact on the production system that is likely associated with higher levels of risk and thus higher change fail rates."
                },
                "version-control": {
                    "name": "Version control",
                    "link": "/capabilities/version-control/",
                    "summary": "The use of a version control system, such as Git or Subversion, for all production artifacts, including application code, application configurations, system configurations, and scripts for automating build and configuration of environments."
                },
                "working-in-small-batches": {
                    "name": "Working in small batches",
                    "link": "/capabilities/working-in-small-batches/",
                    "summary": "Create shorter lead times and faster feedback loops by working in small batches. This means breaking down changes—code or other artifacts—into manageable units that can be quickly tested and evaluated. This approach enables teams to rapidly validate their ideas, get feedback from users, and make necessary adjustments along the way. Small batches improve velocity because they can move quickly from commit to production, while also supporting stability; a smaller batch is likely to contain fewer bugs."
                }
            }
        },
        "fast-feedback": {
            "name": "Fast feedback",
            "summary": "Fast feedback enables a comprehensive approach that ensures your team receives rapid, actionable insights throughout the entire software delivery lifecycle.  Build confidence in the changes the team is making, leading to faster iteration and higher quality software. This translates to improved software delivery performance, helping your organization stay ahead of the curve and deliver exceptional value to your customers.",
            "link": "/capabilities/#fast%20feedback",
            "entities": {
                "continuous-integration": {
                    "name": "Continuous integration",
                    "link": "/capabilities/continuous-integration/",
                    "summary": "A development practice where code is regularly checked in, and each check-in triggers a set of quick tests to discover regressions, which developers fix immediately. The CI process creates canonical builds and packages that are ultimately deployed and released."
                },
                "monitoring-and-observability": {
                    "name": "Monitoring and observability",
                    "link": "/capabilities/monitoring-and-observability/",
                    "summary": "Monitoring and observability tooling allows teams to understand the health of their systems. Effective solutions enable teams to monitor predefined metrics, including system state as experienced by users, as well as allowing engineers to interactively debug systems and explore properties and patterns as they emerge."
                },
                "reliability-engineering": {
                    "name": "Reliability engineering",
                    "summary": "Reliability Engineering is not just about preventing failures, but about <b>embracing them</b> by designing, building, and running systems that can withstand them. Some principles include: accepting failure, continuous improvement, fault tolerance, data integrity, loadbalancing, replication, autoscaling, and automated recovery. By implementing its practices and principles, you can build internet-based distributed systems that are reliable, able to deliver consistent performance even in the face of unexpected events."
                },
                "pervasive-security": {
                    "name": "Pervasive security",
                    "link": "/capabilities/pervasive-security/",
                    "summary": "Incorporate security concerns throughout the software delivery lifecycle (SDLC)—by integrating security into the design and testing phases of the software development process. This process includes conducting security reviews of applications, including the infosec team in the design and demo process for applications, using pre-approved security libraries and packages, and testing security features as a part of the automated test suite."
                },
                "test-automation": {
                    "name": "Test automation",
                    "link": "/capabilities/test-automation/",
                    "summary": "Test throughout the software delivery lifecycle, rather than as a separate phase after “dev complete.” With continuous testing, developers and testers work side by side. High performers practice test-driven development, get feedback from tests in less than ten minutes, and continuously review and improve their test suites (for example, to better find defects and keep complexity under control)."
                },
                "test-data-management": {
                    "name": "Test data management",
                    "link": "/capabilities/test-data-management/",
                    "summary": "The management of test data is an increasingly important part of automated testing. Effective practices include having adequate data to run your test suite, the ability to acquire necessary data on demand, and the data not limiting the number of tests you can run. We caution that your teams should minimize, whenever possible, the amount of test data needed to run automated tests."
                }
            }
        }
    },
    "performance": {
        "software-delivery": {
            "name": "Software delivery",
            "link": "/guides/dora-metrics-four-keys/",
            "summary": "DORA’s research has consistently found that a team’s software delivery capability reliably predicts the value that the team provides to their organization. Survey respondents who achieve high levels of software delivery performance report that their organizations perform better on business objectives. Performance can be assessed according to four software delivery metrics.<br><br>Want to assess your team’s software delivery performance? Try our <a href='/quickcheck' target='_blank'>DORA Quick Check</a> for insights on how to improve.",
            "measured_by": "Four key metrics",
            "entities": {
                "changelead": {
                    "name": "Change lead time",
                    "link": "/guides/dora-metrics-four-keys/",
                    "summary": "This metric measures the time it takes for a code commit or change to be successfully deployed to production. It reflects the efficiency of your software delivery process.<br><br>Want to assess your team’s software delivery performance? Try our <a href='/quickcheck' target='_blank'>DORA Quick Check</a> for insights on how to improve."
                },
                "deployfrequency": {
                    "name": "Deployment frequency",
                    "link": "/guides/dora-metrics-four-keys/",
                    "summary": "This metric measures how often application changes are deployed to production. Higher deployment frequency indicates a more agile and responsive delivery process.<br><br>Want to assess your team’s software delivery performance? Try our <a href='/quickcheck' target='_blank'>DORA Quick Check</a> for insights on how to improve."
                },
                "changefail": {
                    "name": "Change fail percentage",
                    "link": "/guides/dora-metrics-four-keys/",
                    "summary": " This metric measures the percentage of deployments that cause failures in production, requiring hotfixes or rollbacks. A lower change failure rate indicates a more reliable delivery process.<br><br>Want to assess your team’s software delivery performance? Try our <a href='/quickcheck' target='_blank'>DORA Quick Check</a> for insights on how to improve."
                },
                "recoverytime": {
                    "name": "Failed deployment recovery time",
                    "link": "/guides/dora-metrics-four-keys/",
                    "summary": "This metric measures the time it takes to recover from a failed deployment. A lower recovery time indicates a more resilient and responsive system.<br><br>Want to assess your team’s software delivery performance? Try our <a href='/quickcheck' target='_blank'>DORA Quick Check</a> for insights on how to improve."
                }
            }
        },
        "reliability": {
            "name": "Reliability",
            "measured_by": "Service Level Objectives (SLOs)",
            "summary": "Reliability is a system's ability to consistently perform its intended function without interruption or failure. This implies that the system is available, performant, correct, and predictable.  In Cloud computing, this requires attention to many parts of the software development lifecycle, including:  design, implementation, monitoring, automation, testing.  This might include practices like capacity planning, incident management, and release engineering.",
            "entities": {
                "measurement-coverage": {
                    "name": "Measurement coverage",
                    "summary": "Are reliability measurements (SLIs) in place for all critical services/applications/components? The goal here should be to have <b>a set of SLIs that represent customer happiness for each critical service</b>. <br/><br/>How close to \"full coverage\" are you?"
                },
                "measurement-focus": {
                    "name": "Measurement focus",
                    "summary": "Do reliability measurement (SLI) definitions reflect system behavior as experienced by users?  For each of your existing SLIs, which ones can you say are really customer-centric? <br/><br/>For example, 'response-time' is customer-centric because the customer is waiting.  Try not to use infrastructure-centric (like 'cpu-time') or application-internal-centric (like 'queue-length') metrics.  <br/><br/>For each SLI, try writing a small comment describing <b>why it matters</b> to the end user. These measures should be <b>implementation independent</b>."
                },
                "target-optimization": {
                    "name": "Target optimization",
                    "summary": "Are reliability targets (SLOs) set appropriately, reflecting user sentiment and organizational capability? A good litmus test is to imagine changing the SLO, either higher or lower. <br/><br/>What would be the impact? Who would you have to talk to about this?  What is the effect on the business?  <br/><br/>If you are able to answer all of these (ideally through documentation) and make a well-informed decision to change or not, you're on the right track."
                },
                "target-compliance": {
                    "name": "Target compliance",
                    "summary": "Are reliability targets (SLOs) consistently met? How do you know, is there a single dashboard somewhere? One per team? <br/><br/>Can others in your organization find these numbers, and do they make sense to them?  If you're not sure, ask people to give it a shot and see how they do. Be careful when trying to \"roll up\" SLOs as aggregates can be misleading."
                }
            }
        }
    },
    "outcomes": {
        "organizational-performance": {
            "name": "Organizational performance",
            "link": "/research/2020/",
            "summary": "Organizational performance measures the ability of an organization to achieve commercial and non-commercial goals. Academic research has validated this measure and found it to be highly correlated to measures of return on investment (ROI), and it is robust to economic cycles.\n\nSeveral years of analysis shows that, compared to low performers, organizations with the highest level of software delivery performance are twice as likely to exceed their goals. Employee well-being also contributes to organizational performance.",
            "entities": {
                "commercial-performance": {
                    "name": "Commercial Performance",
                    "link": "/research/2020/",
                    "summary": "Commercial goals may include:<ul><li>Profitability</li><li>Productivity</li><li>Market share</li><li>Number of customers</li><li>Quantity of products or services</li></ul>"
                },
                "noncommercial-performance": {
                    "name": "Non-commercial performance",
                    "summary": "Non-commercial goals may include:<ul><li>Operating efficiency</li><li>Customer satisfaction</li><li>Quality of products or services provided</li><li>Achieving organization or mission goals</li></ul>"
                }
            }
        },
        "well-being": {
            "name": "Well-being",
            "link": "/capabilities/well-being/",
            "summary": "Well-being is a reflection of individuals’ happiness and job satisfaction. Increased well-being predicts organizational performance and employees’ job tenure. DORA has studied the impact of deployment pain, rework, and burnout on well-being.",
            "entities": {
                "job-satisfaction": {
                    "name": "Job satisfaction",
                    "link": "/capabilities/job-satisfaction/",
                    "summary": "Job satisfaction represents employees feelings of fulfillment derived from engaging in challenging and meaningful work that utilizes their skills and expertise. When employees are empowered and provided with the necessary tools and resources, they produce better work, leading to improved software delivery performance and overall organizational success. To foster job satisfaction, ensure your people have the tools and resources to do their job, and can make good use of their skills and abilities."
                },
                "productivity": {
                    "name": "Productivity",
                    "summary": "A productive team is a thriving team. Productivity reflects the ability to work effectively, experiment, iterate, and learn from those iterations to continuously improve the user experience. This approach fosters a sense of well-being among team members as they witness the positive impact of their work on users. Productivity in this sense is a holistic measure that encompasses both the team's efficiency and the value they create for others, resulting in a fulfilling and impactful work experience."
                },
                "reduced-burnout": {
                    "name": "Reduced burnout",
                    "link": "/capabilities/well-being/#burnout",
                    "summary": "Burnout is physical, mental, or emotional exhaustion caused by overwork or stress."
                },
                "reduced-rework": {
                    "name": "Reduced rework",
                    "link": "/capabilities/well-being/#rework",
                    "summary": "Rework is reactive unplanned work, including any break/fix work, emergency software deployments and patches, responding to urgent audit documentation requests, and so on."
                }
            }
        }
    }
}